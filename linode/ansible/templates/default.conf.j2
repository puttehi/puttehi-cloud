# TODO: Template properly instead of hardcoding most of the stuff

############ Public subdomain ###########
upstream puttehi.eu {
	server localhost:80;
}

# puttehi.eu (CNAME should exist for www.)
server {
	server_name puttehi.eu;
	listen 80;
    # Access log per host
	access_log /var/log/nginx/$host-access.log;
    # Enable solving DNS challenges with Certbot
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
	# Redirect to HTTPS
    return 302 https://$host$request_uri;
}

server {
	server_name puttehi.eu;
	listen 443 ssl http2;
    # Access log per host
	access_log /var/log/nginx/$host-access.log;

    # Wildcart cert
    # TODO: Fix nginx_domain to common cert path
    ssl_certificate {{ nginx_cert_path }}/{{ nginx_domain }}/fullchain.pem;
	ssl_certificate_key {{ nginx_cert_path }}/{{ nginx_domain }}/privkey.pem;

    #!!!!!!!!!!!!# UNPROTECTED paths #!!!!!!!!!!!!#

    {% for loc, proxy_dest in nginx_reverse_proxy_public.items() %}
    location {{ loc }} {
    	proxy_pass {{ proxy_dest }};
    }
    {% endfor %}
}

############ Main subdomain  ############
# {{ nginx_domain }}
upstream {{ nginx_domain }} {
	server localhost:80;
}

server {
	server_name {{ nginx_domain }};
	listen 80;
    # Access log per host
	access_log /var/log/nginx/$host-access.log;
    # Enable solving DNS challenges with Certbot
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
	# Redirect to HTTPS
    return 302 https://$host$request_uri;
}

server {
	server_name {{ nginx_domain }};
	listen 443 ssl http2;
    # Access log per host
	access_log /var/log/nginx/$host-access.log;

    ssl_certificate {{ nginx_cert_path }}/{{ nginx_domain }}/fullchain.pem;
	ssl_certificate_key {{ nginx_cert_path }}/{{ nginx_domain }}/privkey.pem;

    # Ensure auth from Vouch path
	auth_request /validate;
    # If (possibly previously undone) validation returned 401 unauthorized,
    # forward to unauthorized location (login)
	error_page 401 = @error401;

    #!!!!!!!!!!!!# UNPROTECTED paths #!!!!!!!!!!!!#

    # Vouch validation path
	location = /validate {
		proxy_pass http://vouch.puttehi.eu;

		# vouch only acts on the request headers
		proxy_pass_request_body off;
		proxy_set_header Content-Length "";

		# pass X-Vouch-User along with the request
		auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;

		# these return values are used by the authorization location @error401
		auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
		auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
		auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;
	}

    # Login page from failed auth_request
	location @error401 {
		# redirect to vouch for login
		return 302 https://vouch.puttehi.eu/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
	}

    # Was not forwarded to @error401 == Authorized user, forward to protected content after this line

    ############## Protected paths ##############

    {% for loc, proxy_dest in nginx_reverse_proxy.items() %}
    location {{ loc }} {
    	proxy_pass {{ proxy_dest }};
    }
    {% endfor %}
}

########### Vouch proxy subdomain ###########
# Only handles auth
upstream vouch.puttehi.eu {
    server localhost:9090;
}

server {
	server_name vouch.puttehi.eu;
	listen 80;
	access_log /var/log/nginx/$host-access.log;
	return 302 https://$host$request_uri;
}
server {
	server_name vouch.puttehi.eu;
	listen 443 ssl http2;
	access_log /var/log/nginx/$host-access.log;
    # Same wildcard cert as main domain
	ssl_certificate {{ nginx_cert_path }}/{{ nginx_domain }}/fullchain.pem;
	ssl_certificate_key {{ nginx_cert_path }}/{{ nginx_domain }}/privkey.pem;
	location / {
		proxy_pass http://vouch.puttehi.eu;
	}
}

